#!/usr/bin/env bash

##############################################################################
# DESCRIPTION:
# Script to automate import of whales tool into a given project.
##############################################################################

#######################################
# Global vars
#######################################

SCRIPTARGS="$@";
FLAGS=( "$@" );
OUT="/dev/stdout";
ERR="/dev/stderr";
VERBOSE="/dev/null";
VERSION="";
LOCALDIST=".whales";

#######################################
# Methods
#######################################

# Show help
function show_help() {
    echo -e "" >> $OUT;
    echo -e "Installer for \033[92;1mwhales\033[0m. Usage"; >> $OUT
    echo -e "" >> $OUT;
    echo -e "  \033[1mimportwhales\033[0m \033[2mflags\033[0m \033[1m{TAG}\033[0m" >> $OUT;
    echo -e "" >> $OUT;
    echo -e "  \033[2;3mRequired Arguments:\033[0m" >> $OUT;
    echo -e "    \033[93m{TAG}\033[0m             \033[2mTag name of distribution. See github/RLogik or dockerhub/rlogik\033[0m." >> $OUT;
    echo -e "  \033[2;3mFlag options:\033[0m" >> $OUT;
    echo -e "    \033[93m--help\033[0m          \033[2mDisplays this help information\033[0m."                                    >> $OUT;
    echo -e "    \033[93m--git|--docker\033[0m  \033[2mInstall from git artefacts, docker artefacts\033[0m."                      >> $OUT;
    echo -e "                    \033[2mIf neither flag used installs from local repository\033[0m.";                             >> $OUT;
    echo -e "    \033[93m--force\033[0m         \033[2mIf used, imported files force overwrite existing files in project\033[0m." >> $OUT;
    echo -e "    \033[93m--templates\033[0m     \033[2mIf used, imports template files to a subfolder templates\033[0m."          >> $OUT;
    echo -e "    \033[93m--examples\033[0m      \033[2mIf used, imports template files to a subfolder templates\033[0m."          >> $OUT;
    echo -e "" >> $OUT;
}

# Create temporary folder
function set_temporary_folder() {
    local name="tmp";
    local path;
    local k=0;
    while [[ -d "${name}_${k}" ]] || [[ -f "${name}_${k}" ]]; do k=$(( $k + 1 )); done;
    path="${name}_${k}";
    mkdir "$path" && echo "${path}";
}

function import_whales_files() {
    local flag_force=$1;
    local flag_templates=$2;
    local flag_examples=$3;
    local path="$4";

    # Allow the following to be overwritten
    [[ -d ".whales" ]] && rm -rf ".whales";
    [[ -d ".whales.templates" ]] && rm -rf ".whales.templates";
    [[ -d ".whales.examples"  ]] && rm -rf ".whales.examples";
    # Copy the rest to destination:
    cp -r "${path}/src"                               "./.whales";
    cp    "${path}/dist/VERSION"                      "./.whales";
    ( $flag_templates ) && cp -r "${path}/templates"  "./.whales.templates";
    ( $flag_examples )  && cp -r "${path}/examples"   "./.whales.examples";
    # Copy without overwriting existing contained files:
    cp -n  "${path}/templates/.env"           ".";
    cp -n  "${path}/templates/.gitignore"     ".";
    cp -n  "${path}/templates/.dockerignore"  ".";
    cp -nr "${path}/templates/scripts/."      "./scripts";
    # Copy with optional force overwrite:
    local flag_copy="-n";
    ( $flag_force ) && flag_copy="";
    cp $flag_copy "${path}/templates/.whales.env"                 ".";
    cp $flag_copy "${path}/templates/.whales.Dockerfile"          ".";
    cp $flag_copy "${path}/templates/.whales.docker-compose.yml"  ".";

    # Output version:
    VERSION="$( cat ${path}/dist/VERSION 2> $VERBOSE || echo "{${tag}}" )";
    # Cleanup
    rm -rf "${dest_temp}";
}

# Creates a local copy of versions of whales
function create_local_copy() {
    local path="$1";
    local tag="$2";
    local homepath="$HOME/$LOCALDIST/$tag";
    cli_ask_expect "Do you wish to store a local copy of the \033[92;1mwhales\033[0m:\033[1m${tag}\033[0m distribution in \033[1m${homepath}\033[0m? (y/n) " \
        "^(y|n)$";
    ! [ "$answer" == "y" ] && return;
    ! [ -d "$HOME" ] && echo -e "Could not access the home directory <\033[1m${HOME}\033[0m>." >> $ERR && return;
    ! [ -d "$HOME/$LOCALDIST" ] && mkdir "$HOME/$LOCALDIST";
    ! [ -d "$HOME/$LOCALDIST" ] && echo -e "Could not find or create <\033[1m${HOME}/${LOCALDIST}\033[0m>." >> $ERR && return;
    [ -d "$HOME/$LOCALDIST/$tag" ] && rm -rf "$HOME/$LOCALDIST/$tag";
    mkdir "$HOME/$LOCALDIST/$tag";
    ! [ -d "$HOME/$LOCALDIST/$tag" ] && echo -e "Could not find or create <\033[1m${HOME}/${LOCALDIST}/${tag}\033[0m>." >> $ERR && return;
    cp -r "${path}/." "$HOME/.whales/$tag/";
    local dist=( $( ls $HOME/$LOCALDIST/. ) );
    echo -e "[\033[94;1mINFO\033[0m] Your local distribution \033[1m${HOME}/${LOCALDIST}\033[0m now contains the following versions of \033[92;1mwhales\033[0m: {${dist[@]}}." >> $OUT;
    echo -e "[\033[94;1mINFO\033[0m] In future you can call \033[1mimportwhales {TAG}\033[0m to import whales from your locally stored distributions." >> $OUT;
}

# Obtain artefact from local source
function get_artefact_from_local() {
    local flag_force=$1;
    local flag_templates=$2;
    local flag_examples=$3;
    local tag="$( echo "$4" | sed -E "s/^v([[:digit:]]+.*)$/\1/gi" )";
    local path="$HOME/$LOCALDIST/$tag";
    if ! [ -d "$path" ]; then
        local dist=( $( ls $HOME/$LOCALDIST/. ) );
        echo -e "Valid values for \033[1m{TAG}\033[0m: the local distributions in \033[1m${HOME}/${LOCALDIST}\033[0m contains \033[92;1mwhales\033[0m: {${dist[@]}}." >> $ERR;
        exit 1;
    fi
    import_whales_files $flag_force $flag_templates $flag_examples "${path}";
}

# Obtain artefact from Git repository
function get_artefact_from_repo() {
    local url_info="https://github.com/RLogik/whales/releases";
    !( check_curl && check_tar ) && echo -e "You need \033[1mcurl\033[0m and \033[1mtar\033[0m in order to be able to use this command." >> $ERR && exit 1;
    local flag_force=$1;
    local flag_templates=$2;
    local flag_examples=$3;
    local tag="$( echo "$4" | sed -E "s/^v([[:digit:]]+.*)$/\1/gi" )";
    local file="whales.tar.gz";
    local url="https://github.com/RLogik/whales/archive/refs/tags";         # scheme: {url}/{tag}.tar.gz
    # local url="https://codeload.github.com/RLogik/whales/tar.gz/refs/tags"; # scheme: {url}/{tag}
    local success=false;
    local dest_temp="$( set_temporary_folder )";

    # Download zip archive from repository:
    local urls=( "${url}/${tag}.tar.gz" "${url}/v${tag}.tar.gz" );
    local url_;
    for url_ in "${urls[@]}"; do
        curl -L "${url_}" -o "${dest_temp}/${file}" 2> $VERBOSE >> $VERBOSE \
            && tar -xzf "${dest_temp}/${file}" --directory "${dest_temp}" 2> $VERBOSE >> $VERBOSE \
            && success=true && break;
    done
    ! ( $success ) && echo -e "Tagname \033[1m${tag}\033[0m could not be found! Please refer to \033[94;1m${url_info}\033[0m for valid tag names." >> $ERR && rm -rf "${dest_temp}" && exit 1;

    local path="$( ls -d ${dest_temp}/*/ 2> $VERBOSE | head -1 | sed -E "s/\/$//" )";
    create_local_copy "${path}" "${tag}";
    import_whales_files $flag_force $flag_templates $flag_examples "${path}";
}

# Obtain artefact via docker
function get_artefact_via_docker() {
    local url_info="https://hub.docker.com/r/rlogik/whales/tags";
    local flag_force=$1;
    local flag_templates=$2;
    local flag_examples=$3;
    local tag="$( echo "$4" | sed -E "s/^v([[:digit:]]+.*)$/\1/gi" )";
    local file="whales.tar.gz";
    local image="rlogik/whales:${tag}";
    local success=false;

    # pull from dockerhub:
    docker pull ${image} 2> $VERBOSE >> $VERBOSE && echo "${image}" && success=true;
    ! ( $success ) && echo -e "Tagname \033[1m${tag}\033[0m could not be found! Please refer to \033[94;1m${url_info}\033[0m for valid tag names." >> $ERR && exit 1;
    # Start a temporary container:
    local id="$( docker run -d "${image}" )";
    # Copy contents of application to temporary folder:
    local dest_temp="$( set_temporary_folder )";
    docker cp "${id}:/usr/app/whales/." "${dest_temp}";

    local path="${dest_temp}";
    create_local_copy "${path}" "${tag}";
    import_whales_files $flag_force $flag_templates $flag_examples "${path}";

    # Cleanup
    docker stop "${id}" >> $VERBOSE;
    docker rm "${id}" >> $VERBOSE;
    docker rmi "${image}" >> $VERBOSE;
}

#######################################
# Auxiliary Methods
#######################################

function has_arg() {
    echo "$1" | grep -Eq "(^.*[[:space:]]|^)$2([[:space:]].*$|$)";
}

function cli_ask_expect() {
    msg="$1";
    patternanswer="$2";
    answer="";
    while ( true ); do
        echo -ne "$msg" >> $OUT && read answer;
        ( echo "$answer" | grep -Eq "$patternanswer" ) && break;
    done
}

function check_curl() { ( curl --version >> $VERBOSE 2> $VERBOSE ) && return 0 || return 1; }
function check_tar() { ( tar --version >> $VERBOSE 2> $VERBOSE ) && return 0 || return 1; }

function check_dos2unix() {
    ( dos2unix --version >> $VERBOSE 2> $VERBOSE ) && return 0;
    echo -e "To use Whales, you need to install \033[1mdos2unix\033[0m. To do so, try the instructions on one of the following pages:" >> $ERR;
    echo -e ""                                                         >> $ERR;
    echo -e "  https://command-not-found.com/dos2unix"                 >> $ERR;
    echo -e "  https://formulae.brew.sh/formula/dos2unix"              >> $ERR;
    echo -e "  https://chocolatey.org/packages/dos2unix"               >> $ERR;
    echo -e "  https://waterlan.home.xs4all.nl/dos2unix.html#DOS2UNIX" >> $ERR;
    echo -e ""                                                         >> $ERR;
    return 1;
}

function check_jq() {
    ( jq --version >> $VERBOSE 2> $VERBOSE ) && return 0;
    echo -e "To use Whales, you may wish to optionally install \033[1mjq\033[0m. To do so, try the instructions on one of the following pages:" >> $ERR;
    echo -e ""                                      >> $ERR;
    echo -e "  https://command-not-found.com/jq"    >> $ERR;
    echo -e "  https://formulae.brew.sh/formula/jq" >> $ERR;
    echo -e "  https://chocolatey.org/packages/jq"  >> $ERR;
    echo -e "  https://stedolan.github.io/jq"       >> $ERR;
    echo -e "";
    return 1;
}

#######################################
# Process CLI arguments
#######################################

TAG=""; [[ ${#FLAGS} -gt 0 ]] && TAG="${FLAGS[-1]}";
( echo "$TAG" | grep -Eq "^-+" ) && TAG="";
flag_git=false;       ( has_arg "$SCRIPTARGS" "-+(git|github)" )         && flag_git=true;
flag_docker=false;    ( has_arg "$SCRIPTARGS" "-+(docker|dockerhub)" )   && flag_docker=true;
flag_force=false;     ( has_arg "$SCRIPTARGS" "-+(f|force)" )            && flag_force=true;
flag_templates=false; ( has_arg "$SCRIPTARGS" "-+(template|templates)" ) && flag_templates=true;
flag_examples=false;  ( has_arg "$SCRIPTARGS" "-+(example|examples)" )   && flag_examples=true;
success=0;
check_dos2unix || success=1;
check_jq;
VERSION="";

if ( has_arg "$SCRIPTARGS" "-+(help|man|info)" ); then
    show_help;
    exit 0;
elif [ "$TAG" == "" ]; then
    echo -e "" >> $ERR;
    echo -e "[\033[91mERROR\033[0m] \033[1m{TAG}\033[0m argument cannot be empty!" >> $ERR;
    show_help;
    exit 1;
elif ( $flag_git ); then
    get_artefact_from_repo $flag_force $flag_templates $flag_examples "${TAG}";
elif ( $flag_docker ); then
    get_artefact_via_docker $flag_force $flag_templates $flag_examples "${TAG}";
else
    get_artefact_from_local $flag_force $flag_templates $flag_examples "${TAG}";
fi

echo -e "[\033[94;1mINFO\033[0m] Version \033[92;1m${VERSION}\033[0m of \033[92;1mwhales\033[0m imported." >> $OUT;
exit $success;
