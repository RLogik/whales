#!/usr/bin/env bash

##############################################################################
# DESCRIPTION:
# Script to automate import of whales tool into a given project.
##############################################################################

#######################################
# Process CLI arguments
#######################################

dest="$1";
[[ "$dest" == "" ]] && echo -e "Usage: \033[1mimportwhales <path>\033[0m." >> /dev/stdout && exit 1;
! [[ -d "$dest" ]] && echo -e "Path \033[1m$dest\033[0m does not exist. Create it first before using this command." >> /dev/stdout && exit 1;
image="rlogik/whales";
tag="$2";
[[ "$tag" == "" ]] && tag="latest";

#######################################
# Methods
#######################################

# Attempt to pull image:tag from Dockerhub:
function get_repository() {
    local success=false;
    docker pull $1 2> /dev/null && return;
    echo -e "Tagname \033[1m$1\033[0m could not be found! Please refer to https://hub.docker.com/r/rlogik/whales/tags." >> /dev/stdout;
    exit 1;
}

# Create temporary folder
function set_temporary_folder() {
    local name="tmp";
    local path;
    pushd "$1" >> /dev/null;
        path="$PWD";
        local k=0;
        while [[ -d "${path}/${name}_${k}" ]] || [[ -f "${path}/${name}_${k}" ]]; do k=$(( $k + 1 )); done;
        path="${path}/${name}_${k}";
    popd >> /dev/null;
    mkdir "$path" && echo "${path}";
}

function copy_contents() {
    local image_tag="$1";
    local dest_temp="$( set_temporary_folder "$dest" )";
    local id="$( docker run -d $image_tag )";
    # Copy contents of application to temporary folder:
    docker cp "${id}:/usr/app/whales/." "${dest_temp}";
    # Copy without overwrite to destination folder:
    rm -rf "${dest}/.whales"; # <- allow this to be overwritten.
    cp -rn "${dest_temp}/." "${dest}";
    # Cleanup
    rm -rf "${dest_temp}";
    docker stop "$id" >> /dev/null;
    docker rm "$id" >> /dev/null;
    docker rmi "$image_tag" >> /dev/null;
}

function check_dos2unix() {
    echo -e "Checking if \033[1mdos2unix\033[0m installed...";
    ( dos2unix --version >> /dev/null 2> /dev/null ) && return;
    echo -e "To use Whales, you need to install \033[1mdos2unix\033[0m. To do so, try the instructions on one of the following pages:";
    echo -e "";
    echo -e "  https://command-not-found.com/dos2unix",
    echo -e "  https://formulae.brew.sh/formula/dos2unix",
    echo -e "  https://chocolatey.org/packages/dos2unix",
    echo -e "  https://waterlan.home.xs4all.nl/dos2unix.html#DOS2UNIX",
    echo -e "";
    return 1;
}

function check_jq() {
    echo -e "Checking if \033[1mjq\033[0m installed...";
    ( jq --version >> /dev/null 2> /dev/null ) && return;
    echo -e "To use Whales, you may wish to optionally install \033[1mjq\033[0m. To do so, try the instructions on one of the following pages:";
    echo -e "";
    echo -e "  https://command-not-found.com/jq",
    echo -e "  https://formulae.brew.sh/formula/jq",
    echo -e "  https://chocolatey.org/packages/jq",
    echo -e "  https://stedolan.github.io/jq",
    echo -e "";
    return 1;
}

#######################################
# Call Methods
#######################################

get_repository ${image}:${tag};
copy_contents ${image}:${tag};
success=0;
check_dos2unix || success=1;
check_jq || success=1;
exit $success;
